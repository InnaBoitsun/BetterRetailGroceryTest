@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Search.Context
@using Orckestra.Composer.Search.ViewModels
@using Orckestra.Search.WebsiteSearch;
@using Composite.Core.Routing.Pages;
@using Composite.Search
@using Orckestra.Composer.ContentSearch.DataTypes
@using Orckestra.Composer.Search.RequestConstants
@using Orckestra.Composer.Search
@using Orckestra.Composer.ContentSearch.Services
@using Orckestra.Composer.ContentSearch.Parameters
@using Orckestra.Composer.ContentSearch.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Search Results with Content Tabs"; }
    }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.PageSize.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.PageSize.Help}", DefaultValue = 6)]
    public int PageSize { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Label}",
        Help = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Help}", DefaultValue = true)]
    public bool CurrentSite { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Label}",
    Help = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Help}",
    DefaultValue = false)]
    public bool ShowHighlights { get; set; }

    public ISearchRequestContext SearchRequestContext { get; set; }

    public IContentSearchViewService ContentSearchViewService { get; set; }

    public ProductSearchResultsViewModel ProductSearchResults => SearchRequestContext.ProductsSearchViewModel.ProductSearchResults;

    private bool IsProductsCorrected()
    {
        return !string.IsNullOrEmpty(ProductSearchResults.CorrectedSearchTerms);
    }

}

@{
    if (string.IsNullOrWhiteSpace(SearchRequestContext.SearchQuery)) { return; }

    C1PageRoute.RegisterPathInfoUsage();
    string pathInfo = C1PageRoute.GetPathInfo();
    string currentTabPathInfo = pathInfo?.Split('/')[1];

    var productTab = Data.Get<Orckestra.Composer.ContentSearch.DataTypes.IContentTab>().FirstOrDefault(t => t.IsProductTab);
    var isProductTab = (productTab != null && (currentTabPathInfo == null || productTab.UrlTitle == currentTabPathInfo));

    var contentSearchVm = ContentSearchViewService.GetContentSearchViewModel(new GetContentSearchParameter
    {
        Culture = Data.CurrentLocale,
        PageSize = PageSize,
        CurrentPage = SearchRequestContext.CurrentPage,
        PathInfo = currentTabPathInfo,
        CurrentSiteOnly = CurrentSite,
        SearchQuery = SearchRequestContext.SearchQuery,
        CorrectedSearchQuery = ProductSearchResults.CorrectedSearchTerms,
        BaseUrl = CurrentPageNode.Url,
        QueryKeys = Request.QueryString?.AllKeys,
        ProductsTabActive = isProductTab,
        SortBy = SearchRequestContext.SortBy,
        SortDirection = SearchRequestContext.SortDirection
    });

    var justProductsSearch = contentSearchVm == null;

    if (justProductsSearch)
    {
        @Function("Composer.Search.Summary")
        @ShowProductsSearchResults()
        return;
    }

    if (currentTabPathInfo == null)
    {
        currentTabPathInfo = productTab != null ? productTab.UrlTitle : contentSearchVm.Tabs.First()?.UrlTitle;
    }

    SearchRequestContext.IsProductsSearchActive = isProductTab;

    if (productTab != null)
    {
        var productTabVm = new ContentSearchTabViewModel
        {
            Title = productTab.Title,
            UrlTitle = productTab.UrlTitle,
            TabUrl = $"{CurrentPageNode.Url}/{productTab.UrlTitle}?{SearchRequestParams.Keywords}={SearchRequestContext.SearchQuery}",
            Total = IsProductsCorrected() && !isProductTab ? 0 : ProductSearchResults.TotalCount,
            IsActive = (productTab != null && currentTabPathInfo == null) || (productTab != null && productTab.UrlTitle == currentTabPathInfo)
        };

        contentSearchVm.Tabs.Insert(0, productTabVm);
    }

    var currentTab = contentSearchVm.ActiveTab;
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
    <script type="text/javascript" defer="defer">
        function submitContentSearchForm(sortBy, sortDirection) {

            if (sortBy) {
                document.getElementById("sortBy").value = sortBy;
            }

            if (sortDirection) {
                document.getElementById("sortDirection").value = sortDirection;
            }

            document.getElementById('SearchForm').submit();
        }

        function removeSelection(key) {
            var checkbox = document.getElementById(key);
            checkbox.checked = !checkbox.checked;
            document.getElementById('SearchForm').submit();
        }

        function toggleMoreFacets(el) {
            var targetId = $(el).data("target");
            var lessText = $(el).data("label-less");
            var moreText = $(el).data("label-more");
            $(el).text($(targetId).hasClass("in") ? moreText : lessText);
        }
    </script>
</head>
<body>
    @SearchSummary(contentSearchVm, isProductTab)

    @if (contentSearchVm.Tabs.Count > 0)
    {
        <div class="container-fluid search-tabs">
            <div class=" container">
                <ul class="nav nav-tabs" role="tablist">
                    @foreach (var tab in contentSearchVm.Tabs)
                    {
                        var classValue = tab.IsActive ? "active" : "";
                        <li role="presentation" class="@classValue">
                            <a href="@tab.TabUrl">
                                @tab.Title (@tab.Total)
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    <div class="search-results">
        <!-- Tab panes -->
        <div class="tab-content" style="margin-top: 20px;">
            @if (isProductTab)
            {
                if (ProductSearchResults.TotalCount == 0)
                {
                    var tabsWithResults = contentSearchVm.Tabs.Where(t => t.Total > 0).ToList();
                    <p>@Html.Localized("List-Search", "WeAreSorry", SearchRequestContext.SearchQuery)</p>
                    if (tabsWithResults.Count() > 0)
                    {
                        @ShowButWeFindIn(tabsWithResults)
                        @ShowButWeFindInTeaser(tabsWithResults)
                    }
                }
                @ShowProductsSearchResults()
            }
            else
            {
                if (currentTab != null)
                {
                    <form id="SearchForm" class="search-form form-inline"
                          action="@CurrentPageNode.Url/@currentTab.UrlTitle" method="get" role="search">
                        <input id="keywords" type="hidden" value="@SearchRequestContext.SearchQuery" name="keywords" />
                        <div class="row">
                            <div class="col-xs-12">
                                @if (currentTab.Total > 0)
                                {
                                    <div class="row action-line">
                                        <div class="col-xs-6 visible-sm-block visible-xs-block">
                                            <button type="button" class="btn  btn-default btn-dropdown" data-toggle="collapse" data-target="#facets" aria-expanded="false">
                                                @Html.Localize("List-Search", "B_Refine")
                                                <span class="fa  fa-angle-down"></span>
                                            </button>
                                        </div>
                                        <div class="col-xs-6 col-md-4">
                                            @ShowSortBy()
                                        </div>
                                        <div class="col-xs-12 col-md-8 hidden-sm hidden-xs">
                                            @ShowPaging(currentTab)
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="content-container col-xs-12">
                                <div id="facets" class="col-sm-6 col-md-3 col-lg-2 @(currentTab.Total > 0 ? "facets" : "") collapse">
                                    @Partial("ContentSearch", "SelectedFacets", contentSearchVm)
                                    @Partial("ContentSearch", "Facets", contentSearchVm)
                                </div>
                                <div class="thumbnail-container col-sm-12 col-md-9 col-lg-10">
                                    @foreach (var entry in currentTab.SearchResults.Entries)
                                    {
                                        <div class="col-xs-12 col-sm-4 col-md-4">
                                            @ShowContentSearchEntry(entry)
                                        </div>
                                    }
                                </div>
                                    </div>
                            <div class="col-xs-12 visible-sm-block visible-xs-block">
                                @ShowPaging(currentTab)
                            </div>
                        </div>
                    </form>
                }
            }
        </div>
    </div>
</body>
</html>

@helper SearchSummary(ContentSearchViewModel vm, bool isProductTab)
{
    if (IsProductsCorrected())
    {
        <h1>
            @($"{Html.Localize("List-Search", "L_NoResultsFor")} \"{SearchRequestContext.SearchQuery }\"")
        </h1>
        <p>@Html.Localized("List-Search", "WeAreSorry", SearchRequestContext.SearchQuery)</p>
        @ShowButWeFindIn(vm.SuggestedTabs)
        <h2>@($"{vm.Total} {Html.Localize("List-Search", "L_SearchResults")} \"{ProductSearchResults.CorrectedSearchTerms}\"")</h2>
    }
    else
    {
        if (vm.Total > 0)
        {
            <h1><strong>@vm.Total</strong>@($" {Html.Localize("List-Search", "L_SearchResults")} \"{SearchRequestContext.SearchQuery }\"")</h1>
        }
        else
        {
            <h1>
                @($"{Html.Localize("List-Search", "L_NoResultsFor")} \"{SearchRequestContext.SearchQuery }\"")
            </h1>
        }
        @Function("Composer.Search.Suggestions")
    }
}

@helper ShowButWeFindIn(List<ContentSearchTabViewModel> tabs)
{
    if (tabs == null || !tabs.Any()) { return; }
    <p>
        @Html.Localize("List-Search", "ButWeFind_Part1")
        @for (var i = 0; i < tabs.Count(); i++)
        {
            var tab = tabs[i];
            <a href="@tab.TabUrl">@tab.Total @tab.Title</a>

            if (i < tabs.Count() - 1)
            {
                <text>@Html.Localize("List-Search", "ButWeFind_Separator")</text>
            }
        }
        @Html.Localize("List-Search", "ButWeFind_Part2")
    </p>
}

@helper ShowButWeFindInTeaser(List<ContentSearchTabViewModel> tabs)
{
    if (tabs == null || !tabs.Any()) { return; }

    var teaserItemsCount = 3;
    <div class="content-tab-teaser">
        @foreach (var tab in tabs)
        {
            var resutls = tab.SearchResults.Entries.Take(teaserItemsCount);
            <div class="header">
                <h3 class="title">@tab.Title (@tab.Total)</h3>
                @if (tab.Total > teaserItemsCount)
                {
                <a href="@tab.TabUrl">See all @tab.Title</a>
                }
            </div>
            <div class="row">
                @foreach (var entry in resutls)
                {
                    <div class="col-xs-12 col-sm-4 col-md-4">
                        @ShowContentSearchEntry(entry)
                    </div>
                }
            </div>
        }
    </div>
}

@helper ShowProductsSearchResults()
{
    <div class="row searchgrid">
        <div class="col-md-3  col-lg-2  hidden-xs  hidden-sm">
            <f:function name="Composer.Search.SelectedSearchFacets" xmlns:f="http://www.composite.net/ns/function/1.0" />
            <f:function name="Composer.Search.Facets" xmlns:f="http://www.composite.net/ns/function/1.0" />
        </div>
        <div class="col-md-9  col-lg-10">
            <f:function name="Composer.Search.Index" xmlns:f="http://www.composite.net/ns/function/1.0" />
        </div>
    </div>
}

@helper ShowSortBy()
{
    var sortOptions = Data.Get<Orckestra.Composer.ContentSearch.DataTypes.ISortOption>().OrderBy(t => t.Order).ToList();
    var selectedSortOption = sortOptions.Find(o => o.FieldName == SearchRequestContext.SortBy && (o.IsReverted && SearchRequestContext.SortDirection == "desc" || !o.IsReverted && SearchRequestContext.SortDirection == "asc"));
    var selectedTitle = selectedSortOption != null ? selectedSortOption.Title : Html.Localize("List-Search", "F_Relevance_Option");
    <div class="dropdown">
        <span class="hidden-sm hidden-xs">@Html.Localize("List-Search", "L_Sorting")</span>
        <button type="button" class="btn btn-default  dropdown-toggle btn-dropdown" data-toggle="dropdown">
            @selectedTitle
            <span class="fa  fa-angle-down"></span>
        </button>
        <input type="hidden" id="sortDirection" name="sortDirection" value="@SearchRequestContext.SortDirection" />
        <input type="hidden" id="sortBy" name="sortBy" value="@SearchRequestContext.SortBy" />
        <ul class="dropdown-menu">
            @foreach (var sortOption in sortOptions)
            {
                var sortDirectionOption = sortOption.IsReverted ? "desc" : "asc";
                <li>
                    <a onClick="submitContentSearchForm('@sortOption.FieldName','@sortDirectionOption')">
                        @sortOption.Title
                    </a>
                </li>
            }
        </ul>
    </div>
}

@helper ShowContentSearchEntry(SearchResultEntry entry)
{
    var vm = ContentSearchViewService.GetSearchResultsEntryViewModel(entry);
    @Partial("ContentSearch", "SearchEntryItem", vm)
}

@helper ShowPaging(ContentSearchTabViewModel tab)
{
    if (tab.Total > 1)
    {
        <div class="pull-right">
            @SearchHelpers.Pagination(SearchRequestContext.CurrentPage, tab.PagesCount, 10, Request.Url.AbsoluteUri, SearchRequestParams.Page)
        </div>
    }
}
